/**
 * Copyright 2017 Felipe Hernández
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the 
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

package maestro.solution;

import java.util.ArrayList;

import maestro.solution.Solution;

/**
 * This interface allows MAESTRO to create new solutions for a given problem. An implementation of 
 * this interface must be provided for the optimization process to work. The methods include the 
 * creation of a new solution, the computation of its fitness value(s) and the comparison with 
 * other solutions through the method <code>compareTo()</code>. Special constraints that alter the 
 * initial values generated by MAESTRO can be implemented. Moreover, several fitness values can be 
 * taken into account in order to compare solutions. However, in the end, a solution must be better 
 * than (return a value greater than 0 in the method <code>compareTo()</code>) or worse than 
 * another (return a value smaller than 0); that is, the algorithm must be able to sort the 
 * solutions. A value of 0 must only be returned if the two solutions are identical; if two 
 * solutions are different but no one is better than the other, still a number different from 0 
 * must be returned for both solutions to be taken into account.
 * @author Felipe Hernández
 */
public interface Solution extends Comparable<Solution>
{

	// --------------------------------------------------------------------------------------------
	// Methods
	// --------------------------------------------------------------------------------------------
	
	/**
	 * Creates a new Solution object with the provided values and computes the fitness variables.
	 * The values must be stored to be able to return them using the methods getContValues() and
	 * getDiscValues(). These values may be modified in this method if necessary (when special 
	 * constraints must be met, for instance).
	 * @param id An integer consecutive value generated by MAESTRO starting from 1. It the user 
	 * wishes, it can be used to determine the identifier of the new solution, which is returned by 
	 * the getId() method.
	 * @param contValues The values for the continuous variables; null if there are no continuous 
	 * variables
	 * @param discValues The values for the discrete variables; null if there are no discrete 
	 * variables
	 * @return The new Solution object
	 */
	public Solution createNew(int id, ArrayList<Integer> discValues, ArrayList<Double> contValues);
	
	/**
	 * Returns the identifier of the solution. Must not be an empty string (""). Each solution must
	 * have a unique identifier.
	 * @return The identifier of the solution.
	 */
	public String getId();
	
	/**
	 * Returns the values for the discrete variables; null if there are no discrete variables. The 
	 * order of the values must be consistent with the creation order of the variables.
	 * @return The values for the discrete variables
	 */
	public ArrayList<Integer> getDiscValues();
	
	/**
	 * Returns the values for the continuous variables; null if there are no continuous variables. 
	 * The order of the values must be consistent with the creation order of the variables.
	 * @return The values for the continuous variables
	 */
	public ArrayList<Double> getContValues();
	
	/**
	 * Returns a string with the header of the column(s) in the report table. To use multiple 
	 * columns, the header strings must be separated by a tab (\t) character. 
	 * @return A string with the header of the column(s) in the report table
	 */
	public String getReportHeader();
	
	/**
	 * Returns the value(s) of the solution to be printed in the report table. To use multiple 
	 * columns, the values must be separated by a tab (\t) character. The number of columns must be 
	 * the same as the number used by the header string in the <code>getReportHeader()</code> 
	 * method.
	 * @return The value(s) of the solution to be printed in the report table
	 */
	public String getReport();
	
	/**
	 * @return True if the optimization should stop because of some characteristics of this solution
	 * (e.g. if the known global optimum was reached). False if the optimization should continue.
	 */
	public boolean optimizationConverged();
	
}
